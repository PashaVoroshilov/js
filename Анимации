														Плавные переходы transitions

Плавные переходы в CSS или transitions позволяют изменять значения свойств постепенно.
В отличие от анимаций, которые позволяют управлять любым количеством промежуточных состояний,
 с помощью transitions можно управлять только переходом между двумя состояниями: начальным и конечным.
Чтобы обозначить плавный переход в CSS, достаточно задать одно свойство: transition-duration — длительность перехода.
 Значения задаются в секундах (10s, 3s), долях секунды (0.1s, 0.03s) или миллисекундах (100ms, 333ms).
Плавные переходы и анимацию можно применить только к некоторым CSSсвойствам. В основном это свойства, изменяющие размер, цвет, позицию элементов.
 В статье на MDN приведен перечень анимируемых свойств и характер их анимирования.
По умолчанию плавный переход действует на все анимируемые свойства элемента. Такое поведение соответствует значению all свойства transitionproperty,
 это значение по умолчанию.
Такое поведение часто нежелательно, особенно когда в правиле много свойств.
Можно указать, какие именно свойства нужно изменять плавно, перечислив их в transition-property через запятую:
transition-property: width; // плавно меняется только ширина transition-property: width, height; // плавно меняются только ширина и высота
18
При этом так же через запятую можно задавать переходам разных свойств разную длительность:
transition-property: width, height; transition-duration: 1s, 5s; // ширина меняется за 1 секунду, высота за 5
Ещё одно свойство переходов — transition-delay. Оно определяет задержку перед началом перехода и задаётся в секундах или миллисекундах,
 как и transition-duration.
Ещё одно свойство, влияющее на переход — transition-timing-function. 
Свойство transition-timing-function определяет с какой скоростью и ускорением будут меняться свойства во время перехода.
Так ведёт себя значение ease свойства transition-timing-function. ease,  linear, ease-in, ease-out и ease-in-out.
Для перечисленных свойств есть универсальное свойство, которое позволяет одновременно задать значения transition-property, transitionduration,
 transition-timing-function и transition-delay. Устанавливает эффект перехода между двумя состояниями элемента,
  они могут быть определены с помощью псевдоэлемента :hover или :active, а также динамически через JavaScript.
Синтаксис:
transition: <[ none | <transition-property> ] || <transition-duration> || <transition-timing-function> || <transition-delay>




														Animations 


С помощью CSS можно создавать сложные анимации и очень гибко управлять ими. 
Описание CSS-анимации состоит из двух частей: набора ключевых кадров keyframes и параметров самой анимации.
Вот пример описания ключевых кадров анимации:
@keyframes stretching {    
	0% {       
		width: 100px;    
	}    

	100% {        
		width: 200px;    
	} 
}

Анимация в примере имеет название stretching, и в ней описывается, как будет меняться стиль блока от начальной до конечной точки. 
Эту анимацию можно применить к любому элементу, для этого достаточно добавить в CSS два свойства — animation-name (название анимации)
 и animationduration (длительность) — и задать им нужные значения. 
 Например:
.button {    animation-name: stretching;    animation-duration: 1s; }
Этот код назначит анимацию stretching элементам с классом button. 
В результате работы анимации элемент плавно увеличит ширину со 100px до 200px за 1 секунду.
Для каждой анимации нужно задать имя, описать начальный и конечный ключевые кадры, 
которые задаются с помощью зарезервированных слов from и to или значений 0% и 100%.
Также можно описать промежуточные ключевые кадры, которые задаются с помощью процентов.
Если не задан начальный ключевой кадр, то анимация будет проигрываться из исходного стилевого состояния элемента к ближайшему шагу
из перечисленных в keyframes и далее.
Если не задан конечный кадр, то после достижения последнего промежуточного шага, анимация проиграется в обратном направлении
до достижения изначального состояния элемента.
Ключевые кадры внутри keyframes могут быть написаны в произвольном порядке, но лучше их перечислять по хронологии от меньшего к большему.
Длительность анимации animation-duration задаётся в секундах или миллисекундах, например: 10s, 100ms.
Одному элементу могут быть одновременно назначены несколько анимаций.
Если в этих анимациях меняются разные свойства элемента, то они будут проигрываться одновременно.
Теперь разберём, как добавить элементу вторую параллельную анимацию. Допустим, у нас есть две анимации:
@keyframes move {    to { left: 100px; } } @keyframes stretch {    to { width: 100px; } }
Чтобы назначить элементу вторую анимацию, нужно добавить её название и длительность через запятую в свойствах animation-name и animationduration. 
Вот так:
.element {    animation-name: move, stretch;    animation-duration: 5s, 5s; }
В этом примере две анимации запустятся одновременно, элемент будет параллельно двигаться и удлиняться в течение 5-ти секунд.
Множественные анимации задаются так же, как и множественные фоны и тени — с помощью перечисления свойств через запятую.
Мы можем определять сколько раз будет повторяться анимация. Для этого используется свойство animation-iteration-count.
В качестве значения оно принимает положительные числа и ноль: при нуле анимация не будет выполнена, 
в остальных случаях она повторится указанное число раз.
Также в качестве значения animation-iteration-count может быть использовано служебное слово infinite. 
Оно означает, что анимация будет выполняться бесконечно и никогда не завершится.
Помимо количества проигрываний анимации, мы можем определить её направление с помощью свойства animation-direction. 
По умолчанию анимация имеет прямое направление normal.
Но можно назначить и обратный порядок анимации, чтобы проигрывание начиналось с конца и шло к началу (то есть за начальную точку считался 
кадр to, а за конечную — from). Для этого используется значение reverse свойства animation-direction.
Кроме длительности анимации, мы можем управлять задержкой перед началом её выполнения. 
Синтаксис свойства animation-delay, с помощью которого и назначается задержка начала, идентичен синтаксису свойства animation-duration. 
Например, при задании значения animation-delay: 10s анимация начнётся не сразу, а только через десять секунд.
Свойство, которое определяет, будет ли видимым эффект от анимации, когда сама анимация уже закончилась — это animation-fill-mode. 
При задании свойству значения forwards элемент будет сохранять состояние после завершения анимации.
Другое значение свойства animation-fill-mode — backwards. Это значение определяет состояние элемента до начала анимации.
Если элементу назначена анимация с задержкой начала проигрывания и animation-fill-mode: backwards, 
то стили, описанные в первом ключевом кадре from или 0%, будут применены сразу, ещё до начала проигрывания анимации.
Третье значение свойства animation-fill-mode — both. Оно объединяет действия forwards и backwards. 
То есть до начала анимации элементу присваивается состояние первого ключевого кадра, а после завершения — конечное состояние анимации сохраняется.
Действие animation-fill-mode: both распространяется и на многоразовую, и на чередующуюся анимацию.
Ещё одно управляющее свойство CSS-анимаций — animation-play-state. С его помощью можно поставить анимацию «на паузу», а потом возобновить 
с места остановки. Свойство принимает два значения running и paused. 
Как видно из названий, paused приостанавливает анимацию, а running начинает или возобновляет анимацию, поставленную на паузу. Значение running задано по умолчанию.
И, наконец, самое интересное свойство — animation-timing-function. 
Оно определяет, как именно будет происходить анимация,: с какой скоростью и ускорением будут меняться свойства, задействованные в ней:
ease, linear, ease-in, ease-out и ease-in-out.
Как вы уже догадались существует универсальное свойство которое задаёт сразу несколько параметров анимации.
animation: animation-name || animation-duration || animation-timing-function ||   
||animation-delay || animation-iteration-count || animation-direction ||   animation-fill-mode || animation-play-state